This article will try to explain what the key word "this" point to?
At first, we must know "this" of some way called in javascript.
<li>As a common function</li>
<li>As a method</li>
<li>As a constructor</li>
<li>In the call and apply</li>
Whichever way of "this" is called, who the function belongs to, the "this" point to it.

<h3>in a common function</h3>
<textarea class="content_code box_border s-height">
    javascript
    
    function person(){
      this.name = "xiao";
      console.log(this);
    }
    person();
</textarea>
In the code the person function as a common function called, in fact, the function as a global object is called by window object.
So this point to window object, not the person function.

Otherwise, the window object has the attribution of name , the value is xl.

<h3>in a method</h3>
<textarea class="content_code box_border m-height">
    javascript
    
    var name = "XL";
    var person = {
        name: "xl";
        showName: function(){
            console.log(this.name); 
        }
     }
     person.showName();  //output  "xl"
     var showNameA = person.showName;
     showNameA(); //output "XL"
</textarea>

<h3>in constructor</h3>
<textarea class="content_code box_border m-height">
    javascript
    
    function Person(name){
        this.name = name;
    }
    var personA = Person("xl");
    console.log(personA.name);  //undefined
    console.log(window.name);  //xl
    
    var personB = new Person("xl");  //create instance
    console.log(personB.name);   //xl
</textarea>

<h3>Call and apply method</h3>
<textarea class="content_code box_border s-height">
    javascript
    
    function Person(){
        this.name = "xl";
        this.showName = function(){
            console.log(this.name);
        }
    }
    Person.showName.call();  //output  undefined
</textarea>
Call and apply of the best way is can change object that this point to.